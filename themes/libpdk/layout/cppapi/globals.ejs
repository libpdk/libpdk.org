<%
let apiGlobalData = {
    defines: [],
    funcs:[],
    typedefs: [],
    variables: [],
    classes: [],
    enums: [],
    structs: []
};

_.forOwn(page.globals, function (fileContainer, key)
{
    apiGlobalData.defines = clone(_.concat(apiGlobalData.defines, fileContainer.defines));
    apiGlobalData.funcs = clone(_.concat(apiGlobalData.funcs, fileContainer.funcs));
    apiGlobalData.typedefs = clone(_.concat(apiGlobalData.typedefs, fileContainer.typedefs));
    apiGlobalData.variables = clone(_.concat(apiGlobalData.variables, fileContainer.variables));
    for (let i = 0; i < fileContainer.classes.length; i++) {
        let cur = clone(fileContainer.classes[i]);
        let name = cur.name;
        let pos = name.indexOf("::");
        if (pos == 0 || pos == -1) {
            if (cur.isStruct) {
                apiGlobalData.structs.push(cur);
            }else {
                apiGlobalData.classes.push(cur);
            }
        }
    }
    apiGlobalData.enums = clone(_.concat(apiGlobalData.enums, fileContainer.enums));
});
_.forOwn(apiGlobalData, function (container, key)
{
    container.sort(sort_api_entity_by_name);
    apiGlobalData[key] = container.map(function(item){
        if (key == "defines") {
            let ret = {
                containerId: item.containerId,
                id: item.id,
                name: item.name,
                briefDescription: item.briefDescription,
                url: item.refid ? url_for_api_entity(item.refid) : url_for_entity_detail(item.containerId, item.id)
            };
            if (item.paramsString) {
                ret.paramsString = item.paramsString;
            }
            if (item.initializer) {
                ret.initializer = item.initializer;
            }
            return ret;
        } else if(key == "funcs") {
            let ret = {
                containerId: item.containerId,
                id: item.id,
                name: item.name,
                accessLevel: item.accessLevel,
                isStatic: item.isStatic,
                isConst: item.isConst,
                isExplict: item.isExplict,
                isInline: item.isInline,
                isVirtual: item.isVirtual,
                signature: item.signature,
                briefDescription: item.briefDescription,
                tags: [],
                isTemplate: item.isTemplate
            }
            if (item.tags) {
                ret.tags = item.tags;
            }
            ret.url = url_for_entity_detail(item.containerId, item.id);
            if (item.tplParamsString) {
                ret.tplParamsString = item.tplParamsString;
            }
            return ret;
        } else if (key == "typedefs") {
            let ret = {
                containerId: item.containerId,
                id: item.id,
                name: item.name,
                briefDescription: item.briefDescription
            };
            ret.url = url_for_entity_detail(item.containerId, item.id);
            ret.definition = item.definition;
            return ret;
        } else if (key == "variables") {
            return {
                briefDescription: item.briefDescription,
                defineStr: item.defineStr
            }
        } else if (key == "classes" || key == "structs") {
            return clone(item);
        } else if (key == "enums"){
            return {
                containerId: item.containerId,
                id: item.id,
                name: item.name,
                briefDescription: item.briefDescription,
                url: url_for_entity_detail(item.containerId, item.id),
                tags: item.tags ? item.tags : [],
                isStrong: item.isStrong,
                underType: item.underType
            }
        }
    });
});
%>
<%
function render_funcs(funcs)
{
        for (let i in funcs) {
    let item = funcs[i];
%>
<div class="uk-grid-small list-item" data-uk-grid key = {"apidocglobalsfuncs"+index}>
    <% item.tags && item.tags.length > 0 && render_tags(item.tags) %>
    <% item.isTemplate && render_template_params(item.tplParamsString) %>
    <div class="uk-width-1-1 uk-text-break signature">
        <%- item.signature %>
    </div>
    <div class="uk-width-1-1 uk-width-3-4@s uk-text-break desc"
         dangerouslySetInnerHTML={{__html:item.briefDescription}}></div>
</div>
<%
}
}
%>
<%
function render_template_params(tplParamsString)
{
    let params = "template &lt;" +tplParamsString + "&gt;";
%>
<div class="uk-width-1-1 tpl-params desc"><%- params %></div>
<% } %>

<%
function render_tags(tags)
{
%>
<div class="uk-width-1-1 uk-flex uk-text-break">
    <%
    for(let i in tags) {
        let tag = tags[i];
    %>
    <span class="uk-label uk-label-success"><%- tag %></span>
    <%} %>
</div>
<% } %>

<%
function render_enums(enums)
{
        for(let i in enums) {
    let item = enums[i];
%>
<div class="uk-grid-small list-item" data-uk-grid key = {"apidocglobalsenums"+index}>
    <% item.tags && item.tags.length > 0 && render_tags(item.tags) %>
    <div class="uk-width-1-1 uk-width-1-4@s">
        <a class="uk-text-break" href = "<%- item.url %>"><%- item.name %></a>
        <%- item.underType && " : "+item.underType %>
    </div>
    <div class="uk-width-1-1 uk-width-3-4@s desc uk-text-break">
        <%- item.briefDescription %>
    </div>
</div>
<%
}
}
%>

<%
function render_classes(classes)
{
        for (let i in classes) {
    let item = classes[i];
%>
<div class="uk-grid-small list-item" data-uk-grid key={key+index}>
    <% item.tags && item.tags.length > 0 && render_tags(item.tags) %>
    <% item.isTemplate && render_template_params(item.tplParamsString) %>
    <div class="uk-width-1-1 uk-width-1-3@s">
        <a class="uk-text-break" href = "<%- item.url %>"><%- item.name %></a>
    </div>
    <div class="uk-width-1-1 uk-width-2-3@s desc uk-text-break">
        <%- item.briefDescription %>
    </div>
</div>
<% } %>
<% } %>

<%
function render_macros(macros)
{
        for (let i in macros) {
    let item = macros[i];
%>
<div class="uk-grid-small list-item" data-uk-grid key = {"apidocglobalsmacros"+index}>
    <div class="uk-width-1-1 uk-width-1-4@s">
        <a class="uk-text-break" href = "<%- item.url %>"><%- item.name %>
            <% if (item.paramsString && item.paramsString.trim() != "") { %>
            <span>(<%- item.paramsString %>)</span>
            <% } %>
        </a>
    </div>
    <div class="uk-width-1-1 uk-width-3-4@s">
        <% if (item.initializer && item.initializer.indexOf("\n") == -1) { %>
        <div class="define uk-text-break uk-text-primary">
            <%- item.initializer %>
        </div>
        <% } %>
        <div class="desc uk-text-break"><%- item.briefDescription %></div>
    </div>
</div>
<%
}
}
%>
<%
function render_variables(vars)
{
        for (let i in vars) {
    let item = vars[i];
%>
<div class="uk-grid-small list-item" data-uk-grid>
    <div class="uk-width-1-1">
        <div class="define uk-text-break">
            <%- item.defineStr %>
        </div>
        <div class="uk-text-break desc">
            <%- item.briefDescription %>
        </div>
    </div>
</div>
<%
}
}
%>

<div id="container" style="width: 100%">
    <div class="uk-container uk-margin-small-top uk-margin-small-bottom cppapidoc-page-container cppapidoc-globals-page">
        <div class="manual-container uk-flex uk-flex-left">
            <div class="side-panel-container uk-visible@m">
                <%- partial("_partial/cppapi/sidepanel") %>
            </div>
            <div class="uk-nav-default uk-nav-parent-icon uk-width-expand cppapidoc-info-container cppapidoc-globals-info-container" data-uk-nav>
                <% if (apiGlobalData.classes.length > 0) { %>
                <li class="uk-parent uk-open">
                    <a class="uk-width-1-1 title uk-active">全局类定义</a>
                    <ul class="uk-nav-sub uk-margin-small-bottom">
                        <% render_classes(apiGlobalData.classes) %>
                    </ul>
                </li>
                <% } %>
                <% if (apiGlobalData.structs.length ) { %>
                <li class="uk-parent">
                    <a class="uk-width-1-1 title uk-active">全局结构定义</a>
                    <ul class="uk-nav-sub uk-margin-small-bottom">
                        <% render_classes(apiGlobalData.structs) %>
                    </ul>
                </li>
                <% } %>

                <% if (apiGlobalData.enums.length ) { %>
                <li class="uk-parent">
                    <a class="uk-width-1-1 title uk-active">全局枚举定义</a>
                    <ul class="uk-nav-sub uk-margin-small-bottom">
                        <% render_enums(apiGlobalData.enums) %>
                    </ul>
                </li>
                <% } %>

                <% if (apiGlobalData.defines.length ) { %>
                <li class="uk-parent">
                    <a class="uk-width-1-1 title uk-active">全局宏定义</a>
                    <ul class="uk-nav-sub uk-margin-small-bottom">
                        <% render_macros(apiGlobalData.defines) %>
                    </ul>
                </li>
                <% } %>

                <% if (apiGlobalData.funcs.length ) { %>
                <li class="uk-parent">
                    <a class="uk-width-1-1 title uk-active">全局函数定义</a>
                    <ul class="uk-nav-sub uk-margin-small-bottom">
                        <% render_funcs(apiGlobalData.funcs)%>
                    </ul>
                </li>
                <% } %>

                <% if (apiGlobalData.variables.length ) { %>
                <li class="uk-parent">
                    <a class="uk-width-1-1 title uk-active">全局变量/常量定义</a>
                    <ul class="uk-nav-sub uk-margin-small-bottom">
                        <% render_variables(apiGlobalData.variables) %>
                    </ul>
                </li>
                <% } %>
                <div class="doxygen-info">generated by Doxygen: <%- get_doxygen_version() %></div>
            </div>
        </div>
    </div>
</div>
<script>
   $(function ()
   {
      $(document).ready(function ()
      {
         $(".detail-description table").each(function ()
         {
            $(this).addClass("uk-table uk-table-divider uk-table-small uk-table-striped");
         });
      });
   });
</script>